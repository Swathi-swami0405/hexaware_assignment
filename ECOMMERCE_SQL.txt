CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT NOT NULL
);

CREATE TABLE products (
    product_id INT  PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description varchar(50),
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL
);
SQL ASSIGNMENT- ECOMMERCE APPLICATION

CREATE TABLE cart (
    cart_id INT  PRIMARY KEY,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

CREATE TABLE orders (
    order_id INT  PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE DEFAULT CURRENT_DATE,
    total_amount DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE
);

CREATE TABLE order_items (
    order_item_id INT  PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    item_amount DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

insert into products (product_id, name, description, price, stock_quantity) values
(1, 'Laptop', 'High-performance laptop', 800.00, 10),
(2, 'Smartphone', 'Latest smartphone', 600.00, 15),
(3, 'Tablet', 'Portable tablet', 300.00, 20),
(4, 'Headphones', 'Noise-canceling', 150.00, 30),
(5, 'TV', '4K Smart TV', 900.00, 5),
(6, 'Coffee Maker', 'Automatic coffee maker', 50.00, 25),
(7, 'Refrigerator', 'Energy-efficient', 700.00, 10),
(8, 'Microwave Oven', 'Countertop microwave', 80.00, 15),
(9, 'Blender', 'High-speed blender', 70.00, 20),
(10, 'Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);
insert into customers (customer_id, first_name, last_name, email, address) values
(1, 'John', 'Doe', 'johndoe@example.com', '123 Main St, City'),
(2, 'Jane', 'Smith', 'janesmith@example.com', '456 Elm St, Town'),
(3, 'Robert', 'Johnson', 'robert@example.com', '789 Oak St, Village'),
(4, 'Sarah', 'Brown', 'sarah@example.com', '101 Pine St, Suburb'),
(5, 'David', 'Lee', 'david@example.com', '234 Cedar St, District'),
(6, 'Laura', 'Hall', 'laura@example.com', '567 Birch St, County'),
(7, 'Michael', 'Davis', 'michael@example.com', '890 Maple St, State'),
(8, 'Emma', 'Wilson', 'emma@example.com', '321 Redwood St, Country'),
(9, 'William', 'Taylor', 'william@example.com', '432 Spruce St, Province'),
(10, 'Olivia', 'Adams', 'olivia@example.com', '765 Fir St, Territory');

insert into cart (cart_id, customer_id, product_id, quantity) values
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);

insert into orders (order_id, customer_id, order_date, total_amount) values
(1, 1, '2023-01-05', 1200.00),
(2, 2, '2023-02-10', 900.00),
(3, 3, '2023-03-15', 300.00),
(4, 4, '2023-04-20', 150.00),
(5, 5, '2023-05-25', 1800.00),
(6, 6, '2023-06-30', 400.00),
(7, 7, '2023-07-05', 700.00),
(8, 8, '2023-08-10', 160.00),
(9, 9, '2023-09-15', 140.00),
(10, 10, '2023-10-20', 1400.00);

insert into order_items (order_item_id, order_id, product_id, quantity, item_amount) values
(1, 1, 1, 2, 1600.00),
(2, 1, 3, 1, 300.00),
(3, 2, 2, 3, 1800.00),
(4, 3, 5, 2, 1800.00),
(5, 4, 4, 4, 600.00),
(6, 4, 6, 1, 50.00),
(7, 5, 1, 1, 800.00),
(8, 5, 2, 2, 1200.00),
(9, 6, 10, 2, 240.00),
(10, 6, 9, 3, 210.00);

1. update products set price=800 where name='Refrigerator'

2. delete from cart where customer_id=1

3. select * from products where price<100

4. select * from products where stock_quantity>5

5. select * from orders where total_amount between 500 and 1000

6. select * from products where name like '%r'

7. select c.cart_id, c.customer_id, p.name AS product_name, c.quantity from cart c join products p ON c.product_id = p.product_id where c.customer_id = 5;

8. select * from customers c join orders o on c.customer_id=o.customer_id where year (o.order_date)='2023'

9. select description, min(stock_quantity) as min_stock from products group by description

10. select c.first_name, sum(o.total_amount) from customers c join orders o on c.customer_id=o.customer_id group by c.first_name

11. select c.first_name, avg(o.total_amount) from customers c join orders o on c.customer_id=o.customer_id group by c.first_name

12. select c.first_name, count(o.order_id) from customers c join orders o on c.customer_id=o.customer_id group by c.first_name

13. select c.first_name, max(o.total_amount) from customers c join orders o on c.customer_id=o.customer_id group by c.first_name

14. select customer_id, sum(total_amount) as total_spent from orders group by customer_id having sum(total_amount) >1000;

15. select * from products where product_id not in (select distinct product_id from cart);

16. select * from customers where customer_id not in (select distinct customer_id from orders);

17. select product_id, sum(item_amount) as product_revenue, (sum(item_amount) * 100) / (select sum(total_amount) from orders) as revenue_percentage from order_items group by product_id;

18. select * from products where stock_quantity <= 5;

19. select * from customers where customer_id in (select customer_id from orders where total_amount > 1000);
